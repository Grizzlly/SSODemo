@typeparam TItem
@typeparam TValue
<MudGrid Spacing="@spacing" Justify="Justify.FlexStart" Class="p-2">
    @if (Items.Any())
    {
        foreach (var item in Items)
        {
            <MudItem xs="@itemSize" Class="py-0 px-0 ml-1 mr-2">
                <MudCard>
                    <MudCardHeader Class="pa-1">
                        <CardHeaderContent>
                            @ItemTemplate(item)
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"  Class="mt-2 mr-1"
                                           OnClick="@(() => OnDeleteItem.InvokeAsync(item))" Color="Color.Error" />
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12" Class="py-2 px-0">
            <MudCard>
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        <MudAlert Severity="Severity.Info">Collection is empty.</MudAlert>
                    </CardHeaderContent>                   
                </MudCardHeader>
            </MudCard>
        </MudItem>
    }

    @if (CanAddItem)
    {
        <MudItem xs="3" Class="ml-4 mr-4 py-2 px-0">
            <MudCard>
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        @AddItemTemplate(NewItem)
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="(() => OnAddNewItem.InvokeAsync(NewItem))"
                                       Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
            </MudCard>
        </MudItem>
    }
</MudGrid>
