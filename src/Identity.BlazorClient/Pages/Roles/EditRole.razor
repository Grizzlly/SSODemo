@page "/roles/edit/{Id?}"
@attribute [Authorize(Policy = Policies.CanManageRoles)]

<MudText Typo="Typo.h4">Edit Role</MudText>
<br />

@if (hasErrors)
{
    <MudAlert Severity="Severity.Error">Role details could not be retrieved for roleId : @(Id ?? string.Empty).</MudAlert>
}

@if (model != null)
{
    <MudCard Elevation="4">
        <EditForm Model="@model" OnValidSubmit="UpdateRoleNameAsync">
            <FluentValidationValidator />           
            <MudCard>
                <MudCardContent>
                    <MudStack Spacing="0" Row="true">
                        <MudTextField UserAttributes="@(new (){{"id","txtRoleName"}})" Label="Role Name" HelperText="Required" Disabled="@(!canEditRoleName)"
                                  @bind-Value="model.RoleName" For="@(() => model.RoleName)" Immediate="true" />
                        <MudIconButton UserAttributes="@(new (){{"id","toggleRoleNameEdit"}})" Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary" OnClick="ToggleEditRoleName" Class="ma-3">
                        </MudIconButton>
                    </MudStack>
                </MudCardContent>
                <MudCardActions>
                    <MudButton id="btnUpdateRoleName" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                           hidden="@(!canEditRoleName)" Disabled="@(roleName?.Equals(model.RoleName) ?? true)"
                           Color="Color.Primary" Class="ml-auto">Update</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudCard>

    <br />
    <ClaimsManager Claims="model.Claims" OnAddItem="AddClaimAsync"
               OnUpdateItem="UpdateClaimAsync" OnDeleteItem="RemoveClaimAsync" />
}
